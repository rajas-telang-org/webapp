name: PAcker Deploy
on:
  push:
    branches:
      - dev
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Setup packer
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: "1.9.4"
          shell: bash

      - name: Initialize Packer
        run: packer init ./packer/

      # - name: Edit .env file
      #   run: |
      #     touch .env
      #     echo DB_NAME=${{ secrets.DB_NAME }} >> .env
      #     echo DB_USER=${{ secrets.WEBAPP_DB_USER}} >> .env
      #     echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
      #     echo DB_HOST=${{ secrets.DB_HOST }} >> .env
      #     echo DB_DIALECT=${{ secrets.DB_DIALECT }} >> .env

      - name: Configuring AWS Creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Zipping project
        run: zip -r webapp.zip . --exclude=*.git*

      - name: Deploy Packer
        run: packer build ./packer/aws-debian.pkr.hcl

      - name: Modify Launch Template version with latest AMI
        id: ami
        run: |
          echo "::set-output name=ami_id::$(aws ec2 describe-images --filters 'Name=name,Values=csye6225*' --query 'Images[0].ImageId' --output text)"
     
      - name: Configure DEMO AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.DEMO_AWS_REGION }}

      - name: Creating Launch Template Version
        run: |
          aws ec2 create-launch-template-version --launch-template-name ${{ secrets.LAUNCH_TEMPLATE }} --source-version 1 --launch-template-data '{"ImageId":"${{ steps.ami.outputs.ami_id }}"}'
      
      - name: Refresh autoscaling group
        run: |
          aws autoscaling start-instance-refresh --auto-scaling-group-name ${{ secrets.AUTOSCALING_GROUP }}
          status=""
          while [[ $status != "Successful" && $status != "Failed" && $status != "Cancelled" ]]; do
            status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name ${{ secrets.AUTOSCALING_GROUP }} --query 'InstanceRefreshes[0].Status' --output text)
          done
          echo "Instance refresh status: $status"
          if [ $status != "Successful" ]; then
            echo "Instance refresh failed. Exiting with an error."
            exit 1
          fi